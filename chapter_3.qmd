---
jupyter:
  kernelspec:
    name: python3
    language: python
    display_name: Python 3

format:
  pdf:
    include-in-header: |
      \usepackage{etoolbox}
      \AtBeginEnvironment{verbatim}{\small}  # Riduce la dimensione del font nei blocchi di codice
      \setlength{\parindent}{0pt}  # Rimuove l'indentazione per prevenire problemi di layout
---

# Il Parametro di Liquidità *b* e la sua Ottimizzazione


## Definizione e ruolo del parametro di liquidità *b*

Il parametro di liquidità *b* è una componente chiave nel modello LMSR (Logarithmic Market Scoring Rule), viene utilizzato nei prediction markets regolati da questa formula per gestire la dinamica dei prezzi in funzione del volume delle transazioni. Più semplicemente, *b* determina la sensibilità del mercato ai cambiamenti nelle posizioni dei partecipanti, influenzando direttamente il prezzo di ciascun contratto in relazione al numero di azioni/contratti scambiate/i.
Nello specifico, il parametro *b* determina quanto velocemente i prezzi si aggiustano in risposta alle operazioni di acquisto o vendita. Un valore elevato di *b* implica un mercato meno volatile, dove i prezzi si muovono lentamente anche in presenza di grandi volumi di scambio, mentre un valore basso di *b* rende il mercato più reattivo, con prezzi che variano rapidamente al variare delle transazioni.

In un mercato predittivo è fondamentale che i prezzi dei contratti (o azioni) rispecchino le probabilità reali degli eventi associati, e *b* influenza la capacità del mercato di raggiungere tale obiettivo.
Ad acquistare contratti dei titoli con delle "scommesse" sono i partecipanti al mercato, ovvero gli utenti che decidono di investire un ammontare di crediti nell'evento o negli eventi che ritengono più probabili nel verificarsi concretamente. È logico quindi constatare che la probabilità di vittoria di ciascun titolo in un prediction market riflette l'opinione delle persone che vi partecipano.

Obiettivo dello studio e del lavoro effettuato nell'azienda presso cui ho effettuato il tirocinio consiste nel trovare un valore o un range di valori del parametro di liquidità *b* per cui, rapportati alla liquidità totale immessa dai partecipanti in un mercato, possano mantenere i mercati predittivi bilanciati per favorire il coinvolgimento degli utenti nella piattaforma ma senza rendere la loro partecipazione troppo determinante nel calcolo delle ricompense.


## Altre implicazioni teoriche del paramtero di liquidità *b*

Da un punto di vista più teorico, *b* non determina solo la volatilità dei prezzi, ma influisce anche sul rischio assunto dal market maker nel prediction market. Più basso è il valore di *b*, maggiore è il rischio di oscillazioni estreme dei prezzi, il che può portare a perdite potenziali per il market maker. Per questo motivo all'apertura di ogni mercato il market maker può immettere della liquidità iniziale che funga da "cuscinetto". Il motivo di tale scelta è determinata e consigliata in modo da portare un duplice vantaggio:

- La liquidità iniziale, prima ancora che un mercato venga reso disponibile alla partecipazione degli utenti, fornisce una base per stimare il parametro di liquidità utilizzato per la fase iniziale del mercato.

- Alla chiusura del mercato, dopo la realizzazione di uno o più eventi dello stesso, vi è la distribuzione della liquidità tra i partecipanti che possiedono quote dell'evento o degli eventi vincenti. In questa fase la liquidità in uscita potrebbe essere superiore a quella in entrata ricevuta mentre il mercato era aperto. La liquidità iniziale predisposta dal market maker serve come deposito di garanzia nel caso in cui alla chiusura del mercato la liquidità entrante non sia sufficiente a coprire quella uscente.

Per ovviare al problema della liquidità uscente nella fase di distribuzione sono nate alcune varianti di LMSR, la più nota e utilizzata in alcune piattaforme americane di mercati predittivi è la versione LS-LMSR (Liquidity-Sensitive LMSR) (@{marketmaker_loss}). Nel loro articolo, Othman e i suoi colleghi illustrano come la formula del LMSR che regola un mercato può essere modificata per dimiuire le potenziali perdite di un market maker che si ritrova a ditribuire ai vincitori dei mercati che ha creato più crediti di quelli che sono stati investiti nel mercato stesso. Nel momento in cui viene scritta questa tesi, la piattaforma in corso di sviluppo non presenta la feature di consentire agli utenti della piattaforma di poter creare loro stessi dei mercati predittivi, trattasi per il momento di una azione disponibile solamente ai proprietari e gestori della piattaforma. Non vi è perciò motivo di indagare ulteriormente in merito alla riduzione di potenziali perdite da parte dei market maker poichè la liquidità che verrà distribuita alla fine di ciascun mercato non avrà vincoli in termini di quantità dal momento che l'obbiettivo finale del progetto non è guadagnare crediti ma condurre indagini di mercato di qualsivoglia natura.

Un aspetto particolarmente interessante del loro elaborato riguarda una analisi effettuata sull'effetto del parametro *b* nei confronti della liquidità di mercato e del profitto per il market maker. Come scritto poco sopra, quest ultimo aspetto non ci interessa, il primo invece si rivela particolarmente utile nello studio di questo parametro.

Di seguito viene riportata l'analisi effettuata dopo una simulazione di mercato (il codice eseguito è disponibile alla repository GitHub di uno degli autori, per semplicità riporto solamente il link per accedervi https://github.com/Athosvcc/LMSR-ASM):

![Analisi del parametro nel modello LMSR in relazione al numero di partecipanti (Agents)](volume_analysis.jpg){width=60%}


Si evince come il volume di liquidità scommessa nel mercato varia in relazione al numero di partecipanti e al parametro *b* utilizzato. Nello specifico, il volume di liquidità aumenta proporzionalmente all'aumentare del parametro *b* e all'aumentare del numero di utenti che vi partecipano.

È chiaro che in uno scenario come quello della piattaforma web sviluppata nell'azienda presso cui è stato svolto il tirocinio, in cui l'obiettivo finale non è la massimizzazione del profitto dei market maker, l'**aggregazione delle singole conoscenze** è il fattore più rilevante nella scelta delle impostazioni del modello per questa tipologia di mercati di previsione. Quando la liquidità immessa in un mercato è alta, ovvero quando tanti partecipanti investono i loro crediti per acquistare quote di uno o più titoli, diventa sempre più difficile per un utente influenzare i prezzi. Tuttavia, una soluzione da poter adottare per migliorare questa condizione consiste nel fornire agli utenti della piattaforma dei crediti bonus in cambio della partecipazione quotidiana e dello svolgimento di specifici sondaggi utili all'azienda stessa.

D'altro canto, quando la liquidità immessa nel mercato è troppo bassa, il mercato potebbe essere troppo sensibile e reagire eccessivamente anche a piccole scommesse piazzate dai partecipanti.


## Calibrazione e scelta del parametro di liquidità *b*

Conseguenza delle considerazioni fatte pocanzi, la scelta del valore ottimale di *b* deve risultare un compromesso tra la stabilità del mercato e la necessità di un adeguato livello di reattività alle nuove informazioni.

La calibrazione del parametro di liquidità *b* è un passaggio cruciale per garantire il corretto funzionamento di un prediction market basato sul Logarithmic Market Scoring Rule (LMSR).


### Approccio alla calibrazione

Per calibrare il parametro *b*, l'obiettivo iniziale era portare come esempio dei mercati predittivi creati e terminati nella piattaforma web in attuale sviluppo per poterne studiare l'andamento ed i risultati, tuttavia a causa di alcuni ritardi e problemi di natura logistica non è stato possibile rendere fruibile la piattaforma ad utenti esterni. Per risolvere questo inconveniente, è stato adottato un approccio che combina simulazioni stocastiche e alcune tecniche di machine learning. La prima fase di questa calibrazione utilizza una simulazione Monte Carlo, una tecnica utile per modellare e analizzare sistemi complessi con un elevato grado di variabilità. Nella simulazione vengono impiegate diverse configurazioni di mercato, simulando scenari con un numero differente di partecipanti e di eventi, e testando una gamma di valori per il parametro *b*.

Di seguito viene riportata una tabella raffigurante i risultati di una prima simulazione effettuata prima di applicare il metodo Monte Carlo.**(SPIEGARE)**

Il codice utilizzato per questa e tutte le seguenti simulazioni è riportato nella sezione *Appendici*:

```{python}
#| echo: false

import random
import pandas as pd

# Simulazione del mercato LMSR
def simulate_market(n_participants, n_events, b_values, max_shares=100):
    """
    Simula un mercato LMSR.
    
    n_participants : numero di partecipanti
    n_events : numero di eventi o contratti
    b_values : lista di valori di b da testare
    max_shares : numero massimo di azioni che un partecipante può scambiare
    Ritorna i prezzi finali e il numero di azioni per ogni evento.
    """
    results = []
    for b in b_values:
        for _ in range(n_participants):

            # Genero le azioni acquistate da ogni partecipante
            events_credits = [random.randint(0, max_shares) 
                              for _ in range(n_events)]
            prices = calculate_prices(events_credits, b)
            
            # Salvo i risultati
            results.append({
                'b': b,
                'event_credits': events_credits,
                'prices': prices,
                'spread': max(prices) - min(prices)
            })

    return results

# Funzione per calcolare i prezzi
def calculate_prices(quantities, b):
    total_shares = sum(quantities)
    prices = [round((q / b) / total_shares, 4) for q in quantities]
    return prices

# Simulazione con diversi parametri di liquidità
simulated_data = simulate_market(n_participants=100, n_events=3, 
                                 b_values=[0.5, 1, 2, 5, 10, 20])

# Creazione del dataset dai risultati della simulazione
def create_dataset(simulated_data):
    rows = []
    for data in simulated_data:
        row = {
            'b': data['b'],
            'spread': data['spread']
        }
        row.update({f'Evento_{i}': q for i, q in enumerate(data['event_credits'])})
        row.update({f'Prezzo_{i}': p for i, p in enumerate(data['prices'])})
        rows.append(row)
    return pd.DataFrame(rows)

# Trasformazione dei dati simulati in un dataset e arrotondamento dei prezzi
df = create_dataset(simulated_data)
price_columns = [col for col in df.columns if col.startswith("price_")]
df[price_columns] = df[price_columns].round(4)

df.head(20)
```

Nella tabella sono riportati rispettivamente i seguenti valori per colonna:

- *b*: parametro di liquidità del mercato

- *spread*: differenza tra il prezzo massimo e minimo dei contratti

- *Evento_X*: quote acquistate dai partecipanti per l'evento X

- *Prezzo_X*: prezzo di una quota per l'evento X

Questa simulpazione ha permesso di osservare come i prezzi e lo spread tra essi cambiassero in risposta alle variazioni del parametro *b*. Lo *spread*, definito come la **differenza tra il prezzo massimo e minimo dei contratti in un dato momento**, è un indicatore chiave della liquidità e della stabilità del mercato. Una liquidità eccessivamente bassa (valori di *b* troppo bassi) porta a spread elevati, denotando quindi una scarsa efficienza del mercato. Al contrario, valori troppo alti di *b* possono ridurre l'efficienza di prezzo, portando a una minore sensibilità dei prezzi ai cambiamenti nelle quantità scambiate.


### Simulazioni con Monte Carlo

Obiettivo delle prossime due simulazioni sono **esplorare la variabilità e robustezza del parametro *b***. La simulazione attraverso il metodo di Monte Carlo è utile a valutare come il parametro *b* influenza la liquidità del mercato in scenari diversi e su un gran numero di simulazioni casuali. L'utilità di tale processo si riscontra dal fatto che, in assenza di dati e test reali che non sono stati potuti effettuare nella piattaforma in sviluppo, le simulazioni con Monte Carlo permettono di testare il comportamento del mercato sotto condizioni casuali e vedere come *b* si comporta. Se *b* garantisce una buona liquidità (quindi uno spread ridotto) in molteplici simulazioni, significa che è un parametro robusto e adatto a mercati dinamici. Se, d'altro canto, il parametro *b* produce uno spread molto elevato, può essere indice di un settaggio del parametro non ideale per quel mercato.

Di seguito vengono riportate due simulazioni più complesse che sfruttano il metodo di Monte Carlo. Tale scelta è stata fatta con l'obiettivo di valutare coe il parametro *b* influenza la liquidità di mercato e il prezzo delle quote di ciascun evento in scenari diversi e su un gran numero di simulazioni casuali.

### Prima simulazione
Nella prima simulazione, i risultati mostrano per ciascuna simulazione il valore del parametro di liquidità ***b***, lo **spread**, le **azioni totali** su ogni Evento e i **prezzi** delle rispettive quote (e di conseguenza, per la proprietà che caratterizza un Prediction Market, le probabilità di vittoria di degli eventi). In questa prima simulazione, le azioni totali generate nei vari eventi sono le stesse per tutti i mercati fintanto che la simulazione non cicla attraverso tutti i parametri di *b* stabiliti. Una volta create le simulazioni con tutti i parametri, lo script genera azioni differenti per i vari eventi che a loro volta rimarranno tali finchè non verranno calcolati i relativi prezzi con tutti i parametri di *b*. 

Per una maggior comprensione del codice, viene riportata una spiegazione più dettagliata nella sezione apposita sotto allo script.

```{python}
#| echo: false

### PRIMA SIMULAZIONE ###

import numpy as np
import random
import pandas as pd

# Funzione LMSR per calcolare i prezzi con normalizzazione
def calculate_prices(q, b, decimals=5):
    q = np.array(q)
    max_q = np.max(q)
    
    exp_q_b = np.exp((q - max_q) / b)
    total_exp = np.sum(exp_q_b)
    
    prices = exp_q_b / total_exp
    
    # Arrotondo i prezzi a 'decimals' decimali
    prices = np.round(prices, decimals)
    
    return prices

# Funzione per generare azioni casuali con somma totale fissa
def generate_random_shares(n_events, total_liquidity):
    shares = np.random.dirichlet(np.ones(n_events)) * total_liquidity
    return np.round(shares)

# Creo il dataset dai risultati della simulazione
def create_dataset(simulated_data):
    rows = []
    for data in simulated_data:
        row = {
            'b': data['b'],
            'spread': data['spread']
        }
        row.update({f'Evento_{i}': q for i, q in enumerate(data['q_total'])})
        row.update({f'Prezzo_{i}': p for i, p in enumerate(data['prices'])})
        rows.append(row)
    return pd.DataFrame(rows)

# Simulazione Monte Carlo
def monte_carlo_simulation(n_simulations, n_participants, n_events, b_values, total_liquidity=100000, decimals=4):
    results = []
    
    for sim in range(n_simulations):

        # Genero nuove azioni una volta per simulazione
        q_total = generate_random_shares(n_events, total_liquidity)
        
        # Ciclo su tutti i valori di b mantenendo lo stesso q_total
        for b in b_values:

            # Accumulo azioni dei partecipanti
            q_total_participants = q_total.copy()
            
            # Calcolo i prezzi finali e calcolo lo spread
            prices = calculate_prices(q_total_participants, b)
            spread = np.round(max(prices) - min(prices), decimals)
            
            # Aggiungo il risultato della simulazione alla lista
            results.append({
                'simulation': sim,
                'b': b,
                'q_total': q_total,
                'prices': prices,
                'spread': spread
            })
    
    return results

# Eseguo la simulazione Monte Carlo con 1000 simulazioni, 1000 partecipanti e 3 eventi
monte_carlo_results = monte_carlo_simulation(
    n_simulations=1000, 
    n_participants=1000, 
    n_events=3, 
    b_values=[1000, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000]
)

df = create_dataset(monte_carlo_results)
df.head(14)
```


Per evitare di rendere la lettura verbosa, sono stasti riportati i risultati che corrispondono al primo di quattordici cicli di simulazione di un Prediction Market volto al termine, in cui non è più possibile per un utente scommettere sui titoli. Il codice svolge la seguente funzione: la liquidità totale per comodità di lettura e di analisi è stata fissata a 1.000.000 di crediti virtuali (tale valore è molto verosimile alla liquidità di reali mercati predittivi già presenti online quali Manifold Markets, Futuur, e Prediki.), una funzione (*generate_random_shares*, vedasi Appendici), viene chiamata una sola volta per simulazione per generare la stessa distribuzione di liquidità tra gli eventi; ogni ciclo attraverso i valori di *b* utilizza gli stessi valori di liquidità degli eventi appena generati, cambiando solamente una volta che passati alla simulazione successiva.


### Seconda simulazione

Nella seconda, così come nella prima, i risultati mostrano per ciascuna simulazione il valore del parametro di liquidità ***b***, lo **spread**, le **azioni totali** su ogni Evento e i **prezzi** delle rispettive quote.

Anche in questo caso, si rimanda il lettore alla sezione apposita per una maggiore comprensione del codice.

```{python}
#| echo: false

### SECONDA SIMULAZIONE ###

import numpy as np
import random

# Funzione LMSR per calcolare i prezzi con stabilizzazione numerica e normalizzazione
def calculate_prices(q, b, decimals=5):
    q = np.array(q)
    max_q = np.max(q)
    
    # Calcolo l'esponenziale
    exp_q_b = np.exp((q - max_q) / b)
    total_exp = np.sum(exp_q_b)
    
    # Calcolo i prezzi come frazioni stabilizzate
    prices = exp_q_b / total_exp
    
    # Arrotondo i prezzi a 'decimals' decimali
    prices = np.round(prices, decimals)
    
    return prices

# Funzione per generare azioni casuali con somma esattamente uguale a total_liquidity
def generate_random_shares(n_events, total_liquidity):
    shares = np.random.dirichlet(np.ones(n_events)) * total_liquidity
    return np.round(shares, 2)

# Simulazione Monte Carlo con liquidità massima totale fissa
def monte_carlo_simulation_2(n_simulations, n_participants, n_events, b_values, total_liquidity=100000, decimals=4):
    results = []
    
    for sim in range(n_simulations):
        for b in b_values:

            # Inizializzo q_total con zeri
            q_total = np.zeros(n_events)
            
            for _ in range(n_participants):

                # Genero azioni con somma totale esattamente pari a total_liquidity / n_participants
                q = generate_random_shares(n_events, total_liquidity / n_participants)
                q_total += q
            
            # Arrotondo q_total a due decimali
            q_total = np.round(q_total, 2)
            
            # Calcolo i prezzi finali
            prices = calculate_prices(q_total, b)
            spread = np.round(max(prices) - min(prices), decimals)
            
            # Aggiungo il risultato della simulazione
            results.append({
                'simulation': sim,
                'b': b,
                'q_total': q_total,
                'prices': prices,
                'spread': spread
            })
    
    return results
   

# Eseguo la simulazione Monte Carlo
monte_carlo_results_2 = monte_carlo_simulation_2(n_simulations=1000, n_participants=1000, n_events=3, b_values=[1000, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000])

# Visualizzo i primi 14 risultati
df_2 = create_dataset(monte_carlo_results_2)
df_2.head(14)

```

Nel capitolo successivo viene effettuata un'analisi più dettagliata dei risultati delle due simulazioni di Prediction Markets.