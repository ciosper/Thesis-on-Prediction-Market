---
jupyter:
  kernelspec:
    name: python3
    language: python
    display_name: Python 3

format:
  pdf:
    include-in-header: |
      \usepackage{etoolbox}
      \AtBeginEnvironment{verbatim}{\small}  # Riduce la dimensione del font nei blocchi di codice
      \setlength{\parindent}{0pt}  # Rimuove l'indentazione per prevenire problemi di layout
---

# Appendici

Il codice scritto ed eseguito per lo studio e le simulazioni dei mercati è riportato in questa sezione.

**Capitolo 3** - Semplice simulazione di mercato

```{python}
#| eval: false

import random
import pandas as pd

# Simulazione del mercato LMSR
def simulate_market(n_participants, n_events, b_values, max_shares=100):
    """
    Simulo un mercato LMSR.
    
    n_participants : numero di partecipanti
    n_events : numero di eventi o contratti
    b_values : lista di valori di b da testare
    max_shares : numero massimo di azioni che un partecipante può scambiare

    Ritorna i prezzi finali e il numero di azioni per ogni evento.
    """
    results = []
    for b in b_values:
        for _ in range(n_participants):
            # Genero le azioni acquistate da ogni partecipante
            events_credits = [random.randint(0, max_shares) 
                              for _ in range(n_events)]
            prices = calculate_prices(events_credits, b)
            
            # Salvo i risultati
            results.append({
                'b': b,
                'event_credits': events_credits,
                'prices': prices,
                'spread': max(prices) - min(prices)
            })

    return results

# Funzione per calcolare i prezzi
def calculate_prices(quantities, b):
    total_shares = sum(quantities)
    prices = [round((q / b) / total_shares, 4) for q in quantities]
    return prices

# Simulazione con diversi parametri di liquidità
simulated_data = simulate_market(n_participants=100, n_events=3, 
                                 b_values=[0.5, 1, 2, 5, 10, 20])

# Creo il dataset dai risultati della simulazione
def create_dataset(simulated_data):
    rows = []
    for data in simulated_data:
        row = {
            'b': data['b'],
            'spread': data['spread']
        }
        row.update({f'Ev_{i}': q for i, q in enumerate(data['event_credits'])})
        row.update({f'Price_{i}': p for i, p in enumerate(data['prices'])})
        rows.append(row)
    return pd.DataFrame(rows)

# Trasformo i dati simulati in un dataset e arrotondo i prezzi
df = create_dataset(simulated_data)
price_columns = [col for col in df.columns if col.startswith("price_")]
df[price_columns] = df[price_columns].round(4)

df.head(10)
```

**Capitolo 3** - 1° Simulazione di mercato attraverso il metodo Monte Carlo

```{python}
#| echo: false

### PRIMA SIMULAZIONE ###

import numpy as np
import random
import pandas as pd

# Funzione LMSR per calcolare i prezzi con normalizzazione
def calculate_prices(q, b, decimals=5):
    q = np.array(q)
    max_q = np.max(q)
    
    exp_q_b = np.exp((q - max_q) / b)
    total_exp = np.sum(exp_q_b)
    
    prices = exp_q_b / total_exp
    
    # Arrotondo i prezzi a 'decimals' decimali
    prices = np.round(prices, decimals)
    
    return prices

# Funzione per generare azioni casuali con somma totale fissa
def generate_random_shares(n_events, total_liquidity):
    shares = np.random.dirichlet(np.ones(n_events)) * total_liquidity
    return np.round(shares)

# Creo il dataset dai risultati della simulazione
def create_dataset(simulated_data):
    rows = []
    for data in simulated_data:
        row = {
            'b': data['b'],
            'spread': data['spread']
        }
        row.update({f'Evento_{i}': q for i, q in enumerate(data['q_total'])})
        row.update({f'Prezzo_{i}': p for i, p in enumerate(data['prices'])})
        rows.append(row)
    return pd.DataFrame(rows)

# Simulazione Monte Carlo
def monte_carlo_simulation(n_simulations, n_participants, n_events, b_values, total_liquidity=100000, decimals=4):
    results = []
    
    for sim in range(n_simulations):

        # Genero nuove azioni una volta per simulazione
        q_total = generate_random_shares(n_events, total_liquidity)
        
        # Ciclo su tutti i valori di b mantenendo lo stesso q_total
        for b in b_values:

            # Accumulo azioni dei partecipanti
            q_total_participants = q_total.copy()
            
            # Calcolo i prezzi finali e calcolo lo spread
            prices = calculate_prices(q_total_participants, b)
            spread = np.round(max(prices) - min(prices), decimals)
            
            # Aggiungo il risultato della simulazione alla lista
            results.append({
                'simulation': sim,
                'b': b,
                'q_total': q_total,
                'prices': prices,
                'spread': spread
            })
    
    return results

# Eseguo la simulazione Monte Carlo con 1000 simulazioni, 1000 partecipanti e 3 eventi
monte_carlo_results = monte_carlo_simulation(
    n_simulations=1000, 
    n_participants=1000, 
    n_events=3, 
    b_values=[1000, 2000, 3000, 4000, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000]
)

df = create_dataset(monte_carlo_results)
df.head(14)
```

**Capitolo 3** - 2° Simulazione di mercato attraverso il metodo Monte Carlo

```{python}
#| eval: false

### SECONDA SIMULAZIONE ###

import numpy as np
import random

# Funzione LMSR per calcolare i prezzi con normalizzazione
def calculate_prices(q, b, decimals=5):
    q = np.array(q)
    max_q = np.max(q)
    
    # Calcolo l'esponenziale
    exp_q_b = np.exp((q - max_q) / b)
    total_exp = np.sum(exp_q_b)
    
    # Calcolo i prezzi come frazioni stabilizzate
    prices = exp_q_b / total_exp
    
    # Arrotondo i prezzi a 'decimals' decimali
    prices = np.round(prices, decimals)
    
    return prices

# Funzione per generare azioni casuali con somma == a total_liquidity
def generate_random_shares(n_events, total_liquidity):
    shares = np.random.dirichlet(np.ones(n_events)) * total_liquidity
    return np.round(shares, 2)

# Simulazione Monte Carlo con liquidità massima totale fissa
def monte_carlo_simulation_2(n_simulations, n_participants, n_events,
                             b_values, total_liquidity=100000, decimals=4):
    results = []
    
    for sim in range(n_simulations):
        for b in b_values:

            # Inizializzo q_total con zeri
            q_total = np.zeros(n_events)
            
            for _ in range(n_participants):

                # Genero azioni con somma totale == a total_liquidity / n_participants
                q = generate_random_shares(n_events, total_liquidity / n_participants)
                q_total += q
            
            # Arrotondo q_total a due decimali
            q_total = np.round(q_total, 2)
            
            # Calcolo i prezzi finali
            prices = calculate_prices(q_total, b)
            spread = np.round(max(prices) - min(prices), decimals)
            
            # Aggiungo il risultato della simulazione
            results.append({
                'simulation': sim,
                'b': b,
                'q_total': q_total,
                'prices': prices,
                'spread': spread
            })
    
    return results
   

# Eseguo la simulazione
monte_carlo_results_2 = monte_carlo_simulation_2(n_simulations=1000,
    n_participants=1000,
    n_events=3,
    b_values=[1000, 2000, 3000, 4000, 5000, 10000, 15000,
              20000, 25000, 30000, 35000, 40000, 45000, 50000])

# Visualizzo i primi 14 risultati
df_2 = create_dataset(monte_carlo_results_2)
df_2.head(14)

```

**Capitolo 4** - Test ANOVA sulle simulazioni

```{python}
#| eval: false

import pandas as pd
import numpy as np
from scipy import stats
from statsmodels.stats.multicomp import pairwise_tukeyhsd

# ANOVA: Verifico se il parametro 'b' ha un impatto significativo sullo spread
anova_result = stats.f_oneway(
    df[df['b'] == 1000]['spread'],
    df[df['b'] == 2000]['spread'],
    df[df['b'] == 3000]['spread'],
    df[df['b'] == 4000]['spread'],
    df[df['b'] == 5000]['spread'],
    df[df['b'] == 10000]['spread'],
    df[df['b'] == 15000]['spread'],
    df[df['b'] == 20000]['spread'],
    df[df['b'] == 25000]['spread'],
    df[df['b'] == 30000]['spread'],
    df[df['b'] == 35000]['spread'],
    df[df['b'] == 40000]['spread'],
    df[df['b'] == 45000]['spread'],
    df[df['b'] == 50000]['spread']
)

anova_result_2 = stats.f_oneway(
    df_2[df_2['b'] == 1000]['spread'],
    df_2[df_2['b'] == 2000]['spread'],
    df_2[df_2['b'] == 3000]['spread'],
    df_2[df_2['b'] == 4000]['spread'],
    df_2[df_2['b'] == 5000]['spread'],
    df_2[df_2['b'] == 10000]['spread'],
    df_2[df_2['b'] == 15000]['spread'],
    df_2[df_2['b'] == 20000]['spread'],
    df_2[df_2['b'] == 25000]['spread'],
    df_2[df_2['b'] == 30000]['spread'],
    df_2[df_2['b'] == 35000]['spread'],
    df_2[df_2['b'] == 40000]['spread'],
    df_2[df_2['b'] == 45000]['spread'],
    df_2[df_2['b'] == 50000]['spread']
)

import pandas as pd

final_table = pd.DataFrame({
    "F-Value": [anova_result.statistic, anova_result_2.statistic],
    "p-value": [anova_result.pvalue, anova_result_2.pvalue ]
}, index = ["1° simulazione", "2° simulazione"])

print(final_table)

```

**Capitolo 4** - Test Tukey HSD
```{python}
#| eval: false

from scipy import stats
from statsmodels.stats.multicomp import pairwise_tukeyhsd

# Eseguo il test Tukey HSD
tukey = pairwise_tukeyhsd(endog=df['spread'], groups=df['b'], alpha=0.05)

# ConvertO i risultati di Tukey in un DataFrame
tukey_df = pd.DataFrame(data=tukey.summary().data[1:],
                        columns=tukey.summary().data[0])

# Filtra per significatività (p-value < 0.05)
significant_results = tukey_df[tukey_df['p-adj'] < 0.05]

print(significant_results)

significant_results.head(10)
```

**Capitolo 4** - HeatMap
```{python}
#| eval: false

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Creo una matrice delle differenze medie di spread tra valori di b
b_values = sorted(df['b'].unique())
mean_spread_diff = np.zeros((len(b_values), len(b_values)))

for i, b1 in enumerate(b_values):
    for j, b2 in enumerate(b_values):
        mean_diff = df[df['b'] == b1]['spread'].mean() - df[df['b'] == b2]['spread'].mean()
        mean_spread_diff[i, j] = mean_diff

# VisualizzO la heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(mean_spread_diff, annot=True, fmt=".4f",
            cmap='coolwarm', xticklabels=b_values,
            yticklabels=b_values)
plt.title('Differenze medie degli spread tra i valori di b')
plt.xlabel('Valore di b')
plt.ylabel('Valore di b')
plt.show()

```


**Capitolo 4** - Boxplot 1° simulazione

I due script di codice sottostanti sono stati particolarmente complessi da sviluppare in quanto lavorando nell'ambiente Jupyter Notebook, sovrapporre semplicemente una linea di tendenza ad un boxplot non è stato semplice a causa di problemi banalmente estetici. Spesso i rettangoli di boxplot restavano compattati sulla sinistra del grafico o la linea di tendenza usava un'unità di misura differente.

```{python}
#| eval: false

### BOXPLOT PRIMA SIMULAZIONE ###

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Creo una nuova colonna per la posizione (incremento di 0.2 tra i valori di percentuale_b)
unique_percentages = df['percentuale_b'].unique()
percentage_positions = np.linspace(0, len(unique_percentages) - 1, num=len(unique_percentages))

# Creo un dizionario per mappare ogni percentuale alla sua posizione
position_mapping = {value: pos for value, pos in zip(sorted(unique_percentages), percentage_positions)}

# Aggiungo la colonna di posizioni al dataframe
df['position'] = df['percentuale_b'].map(position_mapping)


plt.figure(figsize=(12, 6))

# Boxplot utilizzando la colonna di posizioni
sns.boxplot(x='position', y='spread', data=df, color="#20B2AA",
            capprops=dict(color="#20B2AA"), whiskerprops=dict(color="#20B2AA"), width=0.7)

# Calcolo la media dello spread per percentuale di b
spread_mean = df.groupby('percentuale_b')['spread'].mean().reset_index()
spread_mean['position'] = spread_mean['percentuale_b'].map(position_mapping)

# Linea di tendenza
sns.lineplot(x='position', y='spread', data=spread_mean, color='red', marker='o', label='Media Spread')

# Titolo e assi grafico
plt.title('Boxplot degli Spread e Linea di Tendenza per Percentuale di b')
plt.xlabel('Percentuale di b rispetto alla Liquidità (%)')
plt.ylabel('Spread')
plt.xticks(ticks=percentage_positions, labels=sorted(unique_percentages), rotation=45)  # Etichette
plt.grid(True)
plt.legend()
plt.show()

```

```{python}
#| eval: false

### BOXPLOT SECONDA SIMULAZIONE ###

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

# Creo una nuova colonna per la posizione (incremento di 0.2 tra i valori di percentuale_b)
unique_percentages = df_2['percentuale_b'].unique()
percentage_positions = np.linspace(0, len(unique_percentages) - 1, num=len(unique_percentages))

# Creo un dizionario per mappare ogni percentuale alla sua posizione
position_mapping = {value: pos for value, pos in zip(sorted(unique_percentages), percentage_positions)}

# Aggiungo la colonna di posizioni al dataframe
df_2['position'] = df_2['percentuale_b'].map(position_mapping)

plt.figure(figsize=(12, 6))

# Boxplot utilizzando la colonna di posizioni
sns.boxplot(x='position', y='spread', data=df_2, color="#20B2AA",
            capprops=dict(color="#20B2AA"), whiskerprops=dict(color="#20B2AA"), width=0.7)

# Calcolo la media dello spread per percentuale di b
spread_mean = df.groupby('percentuale_b')['spread'].mean().reset_index()
spread_mean['position'] = spread_mean['percentuale_b'].map(position_mapping)

# Linea di tendenza
sns.lineplot(x='position', y='spread', data=spread_mean, color='red', marker='o', label='Media Spread')

# Titolo e assi grafico
plt.title('Boxplot degli Spread e Linea di Tendenza per Percentuale di b')
plt.xlabel('Percentuale di b rispetto alla Liquidità (%)')
plt.ylabel('Spread')
plt.xticks(ticks=percentage_positions, labels=sorted(unique_percentages), rotation=45)  # Etichette
plt.grid(True)
plt.legend()
plt.show()

```